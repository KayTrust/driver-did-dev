trigger:
- master

stages:
  - stage: PushApp 
    displayName: Push app
    jobs:
    - job: PreBuild
      displayName: Prepare build
      pool:
        vmImage: 'macOS-latest'
      steps:
      - checkout: self
        clean: true
        persistCredentials: true
        displayName: 'Checkout Git Repo'
      - task: NodeTool@0
        inputs:
          versionSpec: '14.16.1'
        displayName: 'Install Node'
      - script: npm install -g standard-version
        displayName: 'Install standard-version'
      - script: git fetch --tags
        displayName: 'Fetch tags'
      - script: git tag -l | sort -V | tail -n 1 | xargs npm version --no-git-tag-version --allow-same-version
        displayName: Update package.json locally with latest version number
      - task: Npm@1
        displayName: 'Generate changelog and calculate version number'
        inputs:
          command: 'custom'
          customCommand: 'run changelog'
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      - script: git push --follow-tags origin HEAD:$(Build.SourceBranchName)
        displayName: 'Push git tag'
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Pipeline Artifact'
        inputs:
          targetPath: '$(Build.SourcesDirectory)'
          artifact: 'msresolver'
          publishLocation: 'pipeline'
    - job: BuildImage
      displayName: Build image
      dependsOn: PreBuild
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - checkout: self
        clean: true
        persistCredentials: true
        displayName: 'Checkout Git Repo'
      - script: git fetch --tags
        displayName: 'Fetch tags'
      - script: echo "##vso[task.setvariable variable=tag;]$(git describe --tags $(git rev-list --tags --max-count=1))"
        displayName: Set tag variable
      - task: DownloadPipelineArtifact@2
        inputs:
          artifactName: 'msresolver'
          targetPath: $(Build.SourcesDirectory)
      - script: |
          echo ****Display****   
          ls -la
        workingDirectory: '$(Pipeline.Workspace)/s'
        displayName: 'Display  Workspace'
      - task: Docker@2 
        displayName: Build and push images to Azure Registry
        inputs:
          containerRegistry: 'Docker-Registry-NttData'
          repository: '$(DOCKER_REPOSITORY)'
          command: 'buildAndPush'
          Dockerfile: 'Dockerfile'
          ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
            tags: |
              $(tag)
              latest
          ${{ else }}:
            tags: |
              dev
      - task: Docker@2 
        displayName: Build and push images to GitHub Registry
        inputs:
          containerRegistry: 'Docker-Registry-Github-Kaytrust'
          repository: '$(DOCKER_REPOSITORY)'
          command: 'buildAndPush'
          Dockerfile: 'Dockerfile'
          ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
            tags: |
              $(tag)
              latest
          ${{ else }}:
            tags: |
              dev
